EXTRN USER_NUMBER: BYTE

PUBLIC DEC_NUMBER
PUBLIC HEX_NUMBER
PUBLIC BIN_TO_DEC
PUBLIC BIN_TO_HEX

; Сегмент данных
DATAS SEGMENT PARA PUBLIC 'DATA'
	DEC_NUMBER DW 0
	HEX_NUMBER DB 5 DUP('+'), '$'
	POWERS_OF_2 DW 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768
	HEX_NUMBERS DB '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', '$'
	CUR_TETRADE DB 4 DUP(0)
	COPY_USER_NUMBER DB 16 DUP('0'), '$'
	ITER_COUNT DW 0
	I DW 0
	CUR_DEC_NUMBER DW 0
DATAS ENDS

; Сегмент кода
CODES SEGMENT PARA PUBLIC 'CODE'	
    ASSUME CS:CODES, DS:DATAS
	
BIN_TO_DEC PROC NEAR
	MOV BX, 0
	MOV CX, 16
	MOV SI, 0
	MOV DEC_NUMBER, 0
	TRANSLATE_TO_DEC_LOOP:
		MOV AX, 15
		SUB AX, SI
		MOV BX, 2
		MUl BX
		MOV BX, AX
		CMP USER_NUMBER[SI], 0
		JE NEXT_ITER_TRANSLATE
		MOV AX, POWERS_OF_2[BX]
		ADD DEC_NUMBER, AX
		NEXT_ITER_TRANSLATE:
			INC SI
		loop TRANSLATE_TO_DEC_LOOP
	RET
BIN_TO_DEC ENDP

BIN_TO_HEX PROC NEAR
	MOV SI, 0
	
	MOV HEX_NUMBER[SI], '+'
	CMP USER_NUMBER[SI], 0
	JE TO_HEX
	MOV HEX_NUMBER[SI], '-'

	MOV CX, 16
	MOV SI, 15
	MINUS_ONE:
		CMP USER_NUMBER[SI], 0
		JE TO_ONE
		JNE TO_ZERO

		TO_ONE:
			INC USER_NUMBER[SI]
			JMP NEXT_ITER_MINUS_ONE

		TO_ZERO:
			DEC USER_NUMBER[SI]
			MOV CX, 16
			MOV SI, 0
			JMP REVERSE

		NEXT_ITER_MINUS_ONE:
			DEC SI

		loop MINUS_ONE

	MOV CX, 16
	MOV SI, 0
	REVERSE:
		CMP USER_NUMBER[SI], 0
		JE CHANGE_TO_ONE
		JNE CHANGE_TO_ZERO

		CHANGE_TO_ZERO:
			DEC USER_NUMBER[SI]
			JMP NEXT_ITER_REVERSE

		CHANGE_TO_ONE:
			INC USER_NUMBER[SI]

		NEXT_ITER_REVERSE:
			INC SI

		loop REVERSE

	TO_HEX:
		MOV CX, 4
		MOV SI, 0
		MOV ITER_COUNT, 0
		TO_HEX_LOOP:
			MOV CX, 4
			MOV BX, 0
			FORM_TETRADE_LOOP:
				MOV AL, USER_NUMBER[SI]
				MOV CUR_TETRADE[BX], AL
				INC SI
				INC BX
				loop FORM_TETRADE_LOOP
			MOV I, SI
			CALL TO_DEC
			MOV SI, I
			MOV BX, CUR_DEC_NUMBER
			MOV AL, HEX_NUMBERS[BX]
			INC ITER_COUNT
			MOV BX, ITER_COUNT
			MOV HEX_NUMBER[BX], AL
			MOV CX, 5
			SUB CX, ITER_COUNT
			loop TO_HEX_LOOP

	BIN_TO_HEX_EXIT:
		RET		
BIN_TO_HEX ENDP

TO_DEC PROC NEAR
	MOV CX, 4
	MOV SI, 0
	MOV CUR_DEC_NUMBER, 0
	TO_DEC_LOOP:
		MOV AX, 3
		SUB AX, SI
		MOV BX, 2
		MUl BX
		MOV BX, AX
		CMP CUR_TETRADE[SI], 0
		JE NEXT_ITER
		MOV AX, POWERS_OF_2[BX]
		ADD CUR_DEC_NUMBER, AX
		NEXT_ITER:
			INC SI
		loop TO_DEC_LOOP
	RET
TO_DEC ENDP


CODES ENDS
END